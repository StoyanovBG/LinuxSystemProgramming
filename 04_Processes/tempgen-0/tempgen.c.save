#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#define BUF_SIZE 1000000

int pids (char* buf, int pid)
{
	sprintf(buf,"%i", pid);
	return strlen(buf);
}

int main(int argc, char*argv[]){
	if (argc!=2)
	{
		printf("Syntax: tempgen [files_count]\n");
		return EXIT_FAILURE; 
	}

	int files_count = atoi(argv[
	for (int i=0;i<files_count;i++){
		//clone the process
		int pid = fork();
		//check if there is an error
		if (pid==-1){
			printf("Error\n");
			return EXIT_FAILURE;//-1
		}
		//parent notifies the file is created
		else if(pid>0){
			if (i<=9){
				printf("file temp%i%i.tmp created\n", 0,i);
			}
			else{
				printf("file temp%i.tmp created\n", i);
			}
		}
		//child process
		else if (!pid){
			//open a file
			char buffer[files_count];
			//if the number o the file is 1-digit, add 0, to make 01,02,..
			if (i<=9){
				sprintf(buffer, "./temp%i%i.tmp",0,i);
			}
			//else only add the digit to the name of the fine
			else{
				sprintf(buffer, "./temp%i.tmp",i);
			}
			int fd = open(buffer, O_WRONLY | O_CREAT | O_TRUNC, 0644);
			//check for errors when opening
			if (fd==-1){
				printf("Error opening file\n");
				return EXIT_FAILURE; //-1
			}
			char buf[BUF_SIZE];
			//a 1000 times add the pid as text to the file
			for (int i=0;i<1000;i++){
				int buf_len = pids(buf,pid);
				ssize_t nr = write(fd, buf, buf_len);
				//check for errors when writing
				if (nr == -1){
					printf("Error writing to the file\n");
					return -2;
				}
			}
			//check for errors when closing the file
			if (close(fd)== -1){
				printf("Error closing the file\n");
			}
		}
	}
	return EXIT_SUCCESS; //0
}
